# Docker Application Launcher - Orchestrator Container
FROM python:3.11-slim

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV DEBIAN_FRONTEND=noninteractive
ENV TERM=xterm-256color

# Install basic utilities, Docker CLI, and audio/video processing tools
RUN apt-get update && apt-get install -y \
    curl \
    gnupg \
    lsb-release \
    apt-transport-https \
    ca-certificates \
    ffmpeg \
    && curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian \
    $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null \
    && apt-get update \
    && apt-get install -y \
    docker-ce-cli \
    nano \
    tree \
    htop \
    && rm -rf /var/lib/apt/lists/*

# Create app directory
WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt .

# Install Python dependencies (all dependencies for all scripts)
RUN pip install --no-cache-dir -r requirements.txt

# Create directories for user data
RUN mkdir -p /app/data /app/output /app/scripts /app/utils

# Copy path_utils to utils
COPY applications/utils/path_utils.py /app/utils/

# Copy launcher script
COPY launcher.py .
RUN chmod +x launcher.py

# Create startup script
RUN echo '#!/bin/bash\n\
echo "🐳 Docker Application Launcher - Orchestrator Starting..."\n\
echo "==================================================="\n\
echo "💻 Container Orchestration Ready"\n\
echo ""\n\
python launcher.py' > /app/start.sh && chmod +x /app/start.sh

# Default command
CMD ["/app/start.sh"] 