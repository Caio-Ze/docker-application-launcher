#!/usr/bin/env python3
import os
import sys
import subprocess
import time
import re

def get_lines_from_clipboard():
    """Obt√©m o conte√∫do da √°rea de transfer√™ncia atrav√©s de input manual do usu√°rio."""
    try:
        print("\n" + "="*60)
        print("üìã COLAR CONTE√öDO DA √ÅREA DE TRANSFER√äNCIA")
        print("="*60)
        print("Cole o conte√∫do da sua √°rea de transfer√™ncia abaixo.")
        print("(Cada linha ser√° tratada como um nome de pasta)")
        print("Digite 'FIM' numa linha separada quando terminar:")
        print("-"*60)
        
        lines = []
        while True:
            line = input("> ").strip()
            if line.upper() == 'FIM':
                break
            if line:  # Apenas adiciona linhas n√£o vazias
                lines.append(line)
        
        if not lines:
            print("ERRO: Nenhum conte√∫do foi fornecido.")
            return None
            
        print(f"\n‚úÖ {len(lines)} linhas recebidas.")
        print("-"*60)
        
        # Valida√ß√£o b√°sica de cada nome base
        valid_lines = []
        for line in lines:
             # Remove aspas simples ou duplas que podem vir do Finder
             if line.startswith("'") and line.endswith("'"):
                 line = line[1:-1]
             elif line.startswith('"') and line.endswith('"'):
                 line = line[1:-1]

             # Salva o estado da linha ap√≥s a remo√ß√£o de aspas, para log da transforma√ß√£o espec√≠fica
             line_after_quotes = line

             # --- MODIFIED L√ìGICA para substituir o espa√ßo entre um bloco de n√∫meros e um bloco de letras ---
             # Usa regex para maior robustez com diferentes tipos de espa√ßos e para garantir o padr√£o NUMEROS<espa√ßos>LETRAS.
             # Exemplo: "12345   ABC" se torna "12345_ABC"
             # Esta transforma√ß√£o √© aplicada antes da valida√ß√£o de separadores de caminho.
             match = re.match(r"(\d+)\s+([a-zA-Z]+)$", line_after_quotes) # Regex for "NUMBERS<whitespace>LETTERS"
             if match:
                 first_part = match.group(1)
                 letters_part = match.group(2) # J√° validado como letras pelo regex
                 transformed_line = f"{first_part}_{letters_part}"
                 # Apenas para log, se a linha foi realmente modificada por esta regra
                 if line_after_quotes != transformed_line:
                     print(f"  INFO: Specific pattern '{line_after_quotes}' transformed to '{transformed_line}' (number-text pattern with underscore).")
                 line = transformed_line
             # --- FIM DA MODIFIED L√ìGICA ---

             if '/' in line or '\\\\' in line:
                 print(f"AVISO: Nome base '{line}' cont√©m separadores de caminho (/, \\\\) e ser√° pulado.")
                 continue
             if not line: # Pula se a linha ficar vazia ap√≥s strip/remo√ß√£o de aspas
                 continue
             valid_lines.append(line)

        if not valid_lines:
            print("ERRO: Nenhuma linha v√°lida encontrada ap√≥s valida√ß√£o.")
            return None

        return valid_lines
    except KeyboardInterrupt:
        print("\n\nOpera√ß√£o cancelada pelo usu√°rio.")
        sys.exit(1)
    except Exception as e:
        print(f"ERRO inesperado ao processar entrada: {e}")
        sys.exit(1)

def get_destination_directory_from_user():
    """Solicita ao utilizador o caminho da pasta de destino."""
    while True:
        raw_path = input("\nPor favor, arraste a PASTA DE DESTINO (onde as novas pastas ser√£o criadas) para esta janela e pressione Enter: \n-> ")
        cleaned_path = raw_path.strip()
        if cleaned_path.startswith("'") and cleaned_path.endswith("'"):
            cleaned_path = cleaned_path[1:-1]
        if cleaned_path.startswith('\\"') and cleaned_path.endswith('\\"'):
            cleaned_path = cleaned_path[1:-1]
        if cleaned_path.startswith('"') and cleaned_path.endswith('"'):
            cleaned_path = cleaned_path[1:-1]
        # Lida com espa√ßos escapados de arrastar e soltar
        cleaned_path = cleaned_path.replace('\\ ', ' ')
        cleaned_path = cleaned_path.replace(r'\ ', ' ')

        # üê≥ DOCKER PATH CONVERSION
        # Convert host paths to container paths for Docker volume mounts
        original_path = cleaned_path
        
        # Convert macOS host paths to container paths
        if cleaned_path.startswith('/Users/'):
            # Convert /Users/username/... to /host/Users/username/...
            cleaned_path = '/host' + cleaned_path
            print(f"INFO: Convertendo caminho do host '{original_path}' para caminho do container '{cleaned_path}'")
        
        # Convert Linux host paths to container paths  
        elif cleaned_path.startswith('/home/'):
            # Convert /home/username/... to /host/home/username/...
            cleaned_path = '/host' + cleaned_path
            print(f"INFO: Convertendo caminho do host '{original_path}' para caminho do container '{cleaned_path}'")
        
        # If already a container path, keep as is
        elif cleaned_path.startswith('/host/'):
            print(f"INFO: Caminho do container detectado: '{cleaned_path}'")
        
        # For other paths, try as-is first, then suggest alternatives
        else:
            print(f"INFO: Verificando caminho: '{cleaned_path}'")

        if os.path.isdir(cleaned_path):
            return cleaned_path
        else:
            print(f"ERRO: O caminho '{cleaned_path}' n√£o √© um diret√≥rio v√°lido.")
            
            # Provide helpful suggestions
            if original_path.startswith('/Users/') and not cleaned_path.startswith('/host/'):
                print("üí° DICA: Para caminhos do macOS, tente arrastar a pasta novamente.")
                print("   O sistema ir√° converter automaticamente para o caminho do container.")
            elif original_path.startswith('/home/') and not cleaned_path.startswith('/host/'):
                print("üí° DICA: Para caminhos do Linux, tente arrastar a pasta novamente.")
                print("   O sistema ir√° converter automaticamente para o caminho do container.")
            else:
                print("üí° DICA: Certifique-se de que:")
                print("   ‚Ä¢ A pasta existe no seu sistema")
                print("   ‚Ä¢ Voc√™ tem permiss√µes de acesso √† pasta")
                print("   ‚Ä¢ O caminho est√° montado no container Docker")
            
            print("Por favor, tente novamente.")

def create_and_rename_dir_structure(destination_dir, base_name):
    """Cria a estrutura de diret√≥rio base_name/LOC e renomeia base_name se necess√°rio."""

    original_full_path = os.path.join(destination_dir, base_name)
    loc_path = os.path.join(original_full_path, "LOC")

    # --- 1. Cria√ß√£o ---
    try:
        os.makedirs(original_full_path, exist_ok=True)
        print(f"  Diret√≥rio criado: {original_full_path}")
        os.makedirs(loc_path, exist_ok=True)
        print(f"  Subdiret√≥rio criado: {loc_path}")
    except OSError as e:
        print(f"  ERRO ao criar diret√≥rios para '{base_name}': {e}")
        return False # Falha na cria√ß√£o
    except Exception as e:
        print(f"  ERRO inesperado ao criar diret√≥rios para '{base_name}': {e}")
        return False

    # --- 2. Renomea√ß√£o (usando regex para todos os espa√ßos) ---
    # Substitui todas as sequ√™ncias de um ou mais caracteres de espa√ßo por um √∫nico underscore
    potential_new_basename = re.sub(r"\s+", "_", base_name)

    if potential_new_basename != base_name: # Ocorreu uma substitui√ß√£o de espa√ßos
        new_full_path = os.path.join(destination_dir, potential_new_basename)

        if os.path.exists(new_full_path):
            print(f"  ERRO: Destino da renomea√ß√£o '{new_full_path}' j√° existe. Pulando renomea√ß√£o de '{original_full_path}'.")
        else:
            try:
                print(f"  Renomeando: '{original_full_path}' -> '{new_full_path}'")
                os.rename(original_full_path, new_full_path)
                print(f"  Renomeado com sucesso para '{potential_new_basename}'.")
            except OSError as e:
                print(f"  ERRO ao renomear '{original_full_path}' para '{potential_new_basename}': {e}")
            except Exception as e:
                print(f"  ERRO inesperado ao renomear '{original_full_path}': {e}")
    else:
        # Nenhuma substitui√ß√£o de espa√ßo ocorreu, nome j√° est√° no formato desejado ou n√£o continha espa√ßos.
        print(f"  INFO: Nome '{base_name}' n√£o requer renomea√ß√£o geral de espa√ßos.")

    return True # Sucesso geral (cria√ß√£o + tentativa de renomear)

if __name__ == "__main__":
    # 1. Obter nomes base (um por linha) da √°rea de transfer√™ncia
    base_names = get_lines_from_clipboard()
    if not base_names:
        sys.exit(1)
    print(f"\n{len(base_names)} nomes base lidos da √°rea de transfer√™ncia:")
    for name in base_names:
        print(f"- {name}")

    # 2. Obter diret√≥rio de destino do usu√°rio (uma vez)
    destination_dir = get_destination_directory_from_user()
    print(f"\nDiret√≥rio de destino selecionado: {destination_dir}")
    print("\n--- Iniciando cria√ß√£o e renomea√ß√£o ---")

    # 3. Iterar, criar e renomear para cada nome base
    success_count = 0
    failure_count = 0
    processed_count = 0
    for name in base_names:
        processed_count += 1
        print(f"\nProcessando {processed_count}/{len(base_names)}: '{name}'")
        if create_and_rename_dir_structure(destination_dir, name):
            success_count +=1
        else:
            failure_count += 1

    print("\n--- Resumo ---")
    print(f"Total de nomes processados: {len(base_names)}")
    print(f"Estruturas criadas com sucesso (ou parcialmente*): {success_count}")
    print(f"Falhas na cria√ß√£o inicial: {failure_count}")
    print("*Nota: 'Sucesso' inclui casos onde a cria√ß√£o ocorreu mas a renomea√ß√£o pode ter falhado se o destino j√° existia.")
    print("\nScript finalizado.") 